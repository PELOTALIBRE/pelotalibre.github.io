<html lang="es"><head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style type="text/css">
    body {
      margin: 0;
      padding: 0;
    }
  </style>
  <title>Gustavo Cerati</title>
<script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.0.0/crypto-js.min.js"></script>
  <script src="https://content.jwplatform.com/libraries/KB5zFt7A.js"></script>
</head>
<body>
  <div id="player"></div>

 <script>
    let token = "eyJ0eXAiOiJKV1QiLCJraWQiOiJ3VTNpZklJYUxPVUFSZVJCL0ZHNmVNMVAxUU09IiwiYWxnIjoiUlMyNTYifQ.eyJhdF9oYXNoIjoiX01WSlRlV0ZIQTc4N1VLUDFsV0hPUSIsInN1YiI6InZpZ2lhcGFzQGhvdG1haWwuY29tIiwiYnVzaW5lc3NVbml0IjoiU1NMQS1EVEgiLCJyZWdpb25zIjpbImY5MTdjZmY2LTAyNWEtNDkxNy04NGQ2LWZiNjg2Njk3ZDkzYyIsIjJlMTY3MjM3LWM3YmItNDIzYi1iNjA2LWMzMTExNWFkYjFkYSJdLCJhdWRpdFRyYWNraW5nSWQiOiI0MGU2ZWYwMS0yN2M5LTQ0ODQtYTNjMS0yMjI1NGNlNDA1ZWItNDAyODkyNDQiLCJpc28yQ29kZSI6IkFSIiwiaXNzIjoiaHR0cHM6Ly9wcm9kcm9jay5kaXJlY3R2Z28uY29tOjQ0My9vcGVuYW0vb2F1dGgyL3JlYWxtcy9yb290L3JlYWxtcy9zc2xhIiwidG9rZW5OYW1lIjoiaWRfdG9rZW4iLCJkZXZpY2VJZCI6IlgzQ1U3dWh2RkFRWUhhM0lfQVpGanJVQWd4NFNPNVdTMGhGTkhSbFJlX2MiLCJjdXN0b21lclN0YXR1cyI6IkFjdGl2ZSIsImF6cCI6ImR0dmdvIiwiZmFtaWx5TmFtZSI6IlNBWUVTIiwiYXV0aF90aW1lIjoxNzAxODA1OTA3LCJjdXN0b21lcklkIjoiMjM3MjgxODYiLCJleHAiOjE3MDIyOTU4NTQsImlhdCI6MTcwMjEzMDI1NCwiY3VzdG9tZXJTdGF0dXNNZXNzYWdlIjoiMTAwMSIsImlic0FjY291bnRTdGF0dXMiOiJBQ1RJVkUiLCJnaXZlbk5hbWUiOiJQQUJMTyBBTEVYSSIsInNlcnZpY2VQcm92aWRlckFjY291bnRJZCI6IjU4MGVkZWNmLWVhN2QtNDY2Ni1hNDI5LTQwZmVjY2E3MmM1YiIsInZyaW9EZXZpY2VJZCI6ImRhYmFlY2YwLTAxNTMtNDQzMy04YzhlLWM3MWFjZTdlNGFlOCIsImF1ZCI6ImR0dmdvIiwiQ0IxIjpmYWxzZSwiY2hhbm5lbHMiOlsiQ0gwMTAwMDAwMDAwMDE5IiwiQ0gwMTAwMDAwMDAwMTY3IiwiQ0gwMTAwMDAwMDAwMDc2IiwiQ0gwMTAwMDAwMDAwMTA3IiwiQ0gwMTAwMDAwMDAwMjAyIiwiQ0gwMTAwMDAwMDAwMDI2IiwiQ0gwMTAwMDAwMDAwMTY5IiwiQ0gwMTAwMDAwMDAwMTUxIiwiQ0gwMTAwMDAwMDAwMjE2IiwiQ0gwMTAwMDAwMDAwMjA5IiwiQ0gwMTAwMDAwMDAwMDc1IiwiQ0gwMTAwMDAwMDAwMjk1IiwiQ0gwMTAwMDAwMDAwMjkzIiwiQ0gwMTAwMDAwMDAwMDM5IiwiQ0gwMTAwMDAwMDAwMDg3IiwiQ0gwMTAwMDAwMDAwMjI5IiwiQ0gwMTAwMDAwMDAwMDE4IiwiQ0gwMTAwMDAwMDAwMDY4IiwiQ0gwMTAwMDAwMDAwMDM4IiwiQ0gwMTAwMDAwMDAwMDIwIiwiQ0gwMTAwMDAwMDAwMDE1IiwiQ0gwMTAwMDAwMDAwMTQyIiwiQ0gwMTAwMDAwMDAwMTQwIiwiQ0gwMTAwMDAwMDAwMTcxIiwiQ0gwMTAwMDAwMDAwMTE3IiwiQ0gwMTAwMDAwMDAwMDY1IiwiQ0gwMTAwMDAwMDAwMDQ2IiwiQ0gwMTAwMDAwMDAwMjM1IiwiQ0gwMTAwMDAwMDAwMjg2IiwiQ0gwMTAwMDAwMDAwMjMwIiwiQ0gwMTAwMDAwMDAwMjkyIiwiQ0gwMTAwMDAwMDAwMDUxIiwiQ0gwMTAwMDAwMDAwMTM5IiwiQ0gwMTAwMDAwMDAwMjAzIiwiQ0gwMTAwMDAwMDAwMDUwIiwiQ0gwMTAwMDAwMDAwMDc0IiwiQ0gwMTAwMDAwMDAwMTE4IiwiQ0gwMTAwMDAwMDAwMDE2IiwiQ0gwMTAwMDAwMDAwMTYxIiwiQ0gwMTAwMDAwMDAwMTYzIiwiQ0gwMTAwMDAwMDAwMDEwIiwiQ0gwMTAwMDAwMDAwMDM2IiwiQ0gwMTAwMDAwMDAwMjE0IiwiQ0gwMTAwMDAwMDAwMTYyIiwiQ0gwMTAwMDAwMDAwMjcxIiwiQ0gwMTAwMDAwMDAwMTc3IiwiQ0gwMTAwMDAwMDAwMDgwIiwiQ0gwMTAwMDAwMDAwMDY0IiwiQ0gwMTAwMDAwMDAwMDk0IiwiQ0gwMTAwMDAwMDAwMDg2IiwiQ0gwMTAwMDAwMDAwMTA0IiwiQ0gwMTAwMDAwMDAwMTQ4IiwiQ0gwMTAwMDAwMDAwMTE2IiwiQ0gwMTAwMDAwMDAwMTg2IiwiQ0gwMTAwMDAwMDAwMjE1IiwiQ0gwMTAwMDAwMDAwMjIzIiwiQ0gwMTAwMDAwMDAwMjI1IiwiQ0gwMTAwMDAwMDAwMjQ3IiwiQ0gwMTAwMDAwMDAwMjQ5IiwiQ0gwMTAwMDAwMDAwMjU5IiwiQ0gwMTAwMDAwMDAwMDIxIiwiQ0gwMTAwMDAwMDAwMTI4IiwiQ0gwMTAwMDAwMDAwMDM3IiwiQ0gwMTAwMDAwMDAwMjY4IiwiQ0gwMTAwMDAwMDAwMjM2IiwiQ0gwMTAwMDAwMDAwMjQ2IiwiQ0gwMTAwMDAwMDAwMDMwIiwiQ0gwMTAwMDAwMDAwMTQ2IiwiQ0gwMTAwMDAwMDAwMTUyIiwiQ0gwMTAwMDAwMDAwMTU1IiwiQ0gwMTAwMDAwMDAwMTE1IiwiQ0gwMTAwMDAwMDAwMDMxIiwiQ0gwMTAwMDAwMDAwMTk0IiwiQ0gwMTAwMDAwMDAwMjExIiwiQ0gwMTAwMDAwMDAwMjY5IiwiQ0gwMTAwMDAwMDAwMjYzIiwiQ0gwMTAwMDAwMDAwMDk4IiwiQ0gwMTAwMDAwMDAwMjA3IiwiQ0gwMTAwMDAwMDAwMDUzIiwiQ0gwMTAwMDAwMDAwMDQ0IiwiQ0gwMTAwMDAwMDAwMDQwIiwiQ0gwMTAwMDAwMDAwMTgyIiwiQ0gwMTAwMDAwMDAwMDQ4IiwiQ0gwMTAwMDAwMDAwMjA1IiwiQ0gwMTAwMDAwMDAwMjcwIiwiQ0gwMTAwMDAwMDAwMjY3IiwiQ0gwMTAwMDAwMDAwMDUyIiwiQ0gwMTAwMDAwMDAwMDkzIiwiQ0gwMTAwMDAwMDAwMjIyIiwiQ0gwMTAwMDAwMDAwMDcwIiwiQ0gwMTAwMDAwMDAwMjM5IiwiQ0gwMTAwMDAwMDAwMDcxIiwiQ0gwMTAwMDAwMDAwMDg1IiwiQ0gwMTAwMDAwMDAwMDg5IiwiQ0gwMTAwMDAwMDAwMTkzIiwiQ0gwMTAwMDAwMDAwMDkyIiwiQ0gwMTAwMDAwMDAwMTA2IiwiQ0gwMTAwMDAwMDAwMTExIiwiQ0gwMTAwMDAwMDAwMTEyIiwiQ0gwMTAwMDAwMDAwMTE5IiwiQ0gwMTAwMDAwMDAwMzAyIiwiQ0gwMTAwMDAwMDAwMTQxIiwiQ0gwMTAwMDAwMDAwMjgxIiwiQ0gwMTAwMDAwMDAwMTMxIiwiQ0gwMTAwMDAwMDAwMjgzIiwiQ0gwMTAwMDAwMDAwMjk4IiwiQ0gwMTAwMDAwMDAwMjEwIiwiQ0gwMTAwMDAwMDAwMjA4IiwiQ0gwMTAwMDAwMDAwMjI2IiwiQ0gwMTAwMDAwMDAwMjM4IiwiQ0gwMTAwMDAwMDAwMjczIiwiQ0gwMTAwMDAwMDAwMjc2IiwiQ0gwMTAwMDAwMDAwMzEyIiwiQ0gwMTAwMDAwMDAwMzEzIiwiQ0gwMTAwMDAwMDAwMzE1IiwiQ0gwMTAwMDAwMDAwMzE2IiwiQ0gwMTAwMDAwMDAwMzE3IiwiQ0gwMTAwMDAwMDAwMzMwIiwiQ0gwMTAwMDAwMDAwMzMxIiwiQ0gwMTAwMDAwMDAwMzM0IiwiQ0gwMTAwMDAwMDAwMzM1IiwiQ0gwMTAwMDAwMDAwMzM2IiwiQ0gwMTAwMDAwMDAwMzM3IiwiQ0gwMTAwMDAwMDAwMzQyIiwiQ0gwMTAwMDAwMDAwMzQwIiwiQ0gwMTAwMDAwMDAwMzQxIiwiQ0gwMTAwMDAwMDAwMzQzIl0sInZyaW9DdXN0b21lcklkIjoiNTgwZWRlY2YtZWE3ZC00NjY2LWE0MjktNDBmZWNjYTcyYzViIiwibmFtZSI6IlBBQkxPIEFMRVhJIFNBWUVTIiwicmVhbG0iOiIvc3NsYSIsImNzbSI6IjIiLCJ0b2tlblR5cGUiOiJKV1RUb2tlbiJ9.B_EaRzff7QasynBND_KUjh1Bpq1ING6R_Y0EbWB8PeD-B3M3KwL0jn-TaFlzL6sHm7GLLBWOdf8rX9sAXArXzltRUOtmxaaKeNag0LfozMCut78NbpbfolC_40VPKxbW72abHNx1hldja24oZu8DVj904tX-J6KdOrU5lXHIswu7MvhJrDw8KJNFX79OYiRlDOvSK5Hp3ebW_SgVhYbQ7JgpsP5kWUOyD5xBKBpw0QSi-ut54G1AfhL5RqEogHmxZmPg3cu9u7hgEv5feVW_mfkuOVeVuLRQCznkybPRQrMAeNcABB5GkFuI9mU0hcgckhN8OtaXMf7pGC0XGM6_Hg";

    // Obtener el valor del parámetro 'id' de la URL utilizando la función getParameterByName
    var channelId = getParameterByName('id');

    // Definir información para diferentes canales
    let channelInfo = {
        "GH": {
            chid: "CH0100000000341",
            keyId: "de7d7ded48b437d691966acdc8a97262",
            key: "c1696c67cf7a678932d33340135ea82b"
        },
        "GHCAMARA1": {
            chid: "CH0100000000342",
            keyId: "9551559085843488876b472cd5416000",
            key: "a7dbd673c51a4c73522e7d1a240fa7bc"
        },

"GHCAMARA2": {
            chid: "CH0100000000343",
            keyId: "206ba28f691f34f88d8886cc42702c4c",
            key: "7830b692416a413e1f31fb81a3bdf752"
        },

"GHCAMARA3": {
            chid: "CH0100000000340",
            keyId: "cd9941e77fc63100986acdcb6bcba661",
            key: "dc9b59d9a8397b756bdd2607c7614476"
        },
      

"TELEFE": {
            chid: "",
            keyId: "",
            key: ""
        },
      
       "ESPNCL": {
            chid: "CH0100000000164",
            keyId: "1f76baf7c7ac317c8ee9f64991298e88",
            key: "8c3aa01f5cf71aab30d6df7ab74bfb23"
        },

           "TNTCL": {
            chid: "CH0100000000041",
            keyId: "1b9984dc66b259fe8ae597cb4fc1f4c3",
            key: "ffb53a94f48f499546869c1f9e877187"
        },
            "TNT2CL": {
            chid: "CH0100000000043",
            keyId: "b94af7e787a95bf0b7d838fb34f27842",
            key: "2d2a808c4367669044777e623d7ff136"
        },

           "TNT3CL": {
            chid: "CH0100000000042",
            keyId: "ce810782e63339049f1a4854a081416b",
            key: "9fe13e1bbc3fdebd7acc0b6070f61340"
        },

         "WINSPORTS": {
            chid: "CH0100000000265",
            keyId: "a07d972af3ea385ab67b9ddc832e3d55",
            key: "a75929e2696c04b382b901793982b6ed"
        },

       "WINSPORTSPLUS": {
            chid: "CH0100000000266",
            keyId: "34d62b22efc63f659eac5ba82289882d",
            key: "696de7a82257ddb51ed3fdec04b6ec8b"
        },
      "ESPNCO": {
            chid: "CH0100000000165",
            keyId: "2444f7f19b29352eb6d1c7f9d8f71d59",
            key: "027fc4f3b6275111c0c8b5ae84933ea8"
        },

       "ESPNMX": {
            chid: "CH0100000000168",
            keyId: "715ea55293fe3d178a7bce49e51e4d68",
            key: "27980a955bc3885c922b558e134b98ec"
        },

       "ESPN2MX": {
            chid: "CH0100000000157",
            keyId: "06b3adfba9845c7c924704fd8b8dcd64",
            key: "6244063ad7317036483d129ad7bcc75a"
        },

         "VTVPLUS": {
            chid: "CH0100000000028",
            keyId: "12d1ef63300a35c49c8cab6e6b89f8e5",
            key: "d092d2e9815a561f4167a8cc70e38cf7"
        },

       "ESPN": {
            chid: "CH0100000000162",
            keyId: "6fb095d66807314cabbde0385b2953e4",
            key: "eb790b9685c1d3f9680cc9f907a502ea"
        },

     "ESPN2": {
            chid: "CH0100000000016",
            keyId: "933de8e915535ae18c2558a5a76318c9",
            key: "45d78db595418f228edcdfd8eee3244a"
        },
        "TNTAR": {
            chid: "CH0100000000040",
            keyId: "c4697bf458da52f8b96b36cce761d571",
            key: "d905edf70433013f22444460fe4e0121"
        },

       "ESPNPREMIUM": {
            chid: "CH0100000000182",
            keyId: "13cc9fd6bd903b9ab1602b12e3080ffd",
            key: "ad1709ca8208939e969b2aa8f631edbf"
        },
       "TYC": {
            chid: "CH0100000000036",
            keyId: "566d0a2b7ee9384c8fc5e3613db7fb7e",
            key: "5d90f742e6398b7ab0abb769c77b2638"
        },
    };

    // Obtener la información del canal actual
    let currentChannel = channelInfo[channelId];

    // Verificar si se encontró información para el canal actual
    if (currentChannel) {
        fetchAuthorizationToken(token, currentChannel);
    } else {
        console.error("No se encontró información para el canal especificado en la URL.");
    }

    function fetchAuthorizationToken(token, channel) {
        // Asegúrate de que channel esté definido y tenga keyId y key
        if (channel && channel.keyId && channel.key) {
            fetch("https://api.directvgo.com/entitlement/v3/playback/token/authorizer", {
                method: "POST",
                headers: {
                    "Authorization": "Bearer " + token,
                    "Content-Type": "application/json",
                    "X-Client-Id": "web",
                    "X-Client-Version": "3.17.0"
                },
                body: JSON.stringify({
                    contentId: channel.chid,
                    delay: 0,
                    isLive: true,
                    mobileNetwork: true
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.manifest && data.manifest.dash && data.manifest.dash.primary) {
                    let manifestUrl = data.manifest.dash.primary;

                    fetch(manifestUrl)
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('HTTP error! status: ' + response.status);
                            }
                            const hdntl = response.headers.get('hdntl');
                            if (hdntl) {
                                console.log('hdntl:', hdntl);

                                // Configurar JWPlayer con clearkey y hdntl
                                let player = jwplayer("player");
                                player.setup({
                                    playlist: [{
                                        sources: [{
                                            default: false,
                                            type: "dash",
                                            file: manifestUrl,
                                            drm: {
                                                clearkey: {
                                                    keyId: channel.keyId,
                                                    key: channel.key
                                                }
                                            },
                                            label: "0",
                                            onXhrOpen: function (xhr, url) {
                                                if (!url.includes("manifest.mpd")) {
                                                    xhr.setRequestHeader("Hdntl", hdntl);
                                                }
                                            }
                                        }]
                                    }],
                                    width: "100%",
                                    height: "100%",
                                    aspectratio: "16:9",
                                    autostart: false,
                                    cast: {},
                                    sharing: false
                                });
                            } else {
                                console.log('Header "hdntl" not found in the response.');
                            }
                            return response.text();
                        })
                        .catch(error => console.error('Error fetching MPD:', error));

                } else {
                    console.error("Dash primary URL not found in the response.");
                }
            })
            .catch(error => console.error("Error fetching authorization token:", error));
        } else {
            console.error("Información incompleta para el canal actual.");
        }
    }

    // Función getParameterByName
    function getParameterByName(name) {
        name = name.replace(/[\[]/, "\[").replace(/[\]]/, "\]");
        var regex = new RegExp("[\?&]" + name + "=([^&#]*)"),
            results = regex.exec(location.search);
        return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
    }
</script>





 
</body></html>
